link(rel="import" href="../bower_components/polymer/polymer.html")
link(rel="import" href="../bower_components/polymer/lib/elements/custom-style.html")
link(rel="import" href="../bower_components/polymerfire/firebase-app.html")
link(rel="import" href="../bower_components/polymerfire/firebase-auth.html")
link(rel="import" href="../bower_components/polymerfire/firebase-query.html")
link(rel="import" href="../bower_components/paper-input/paper-textarea.html")
link(rel="import" href="../bower_components/iron-icons/iron-icons.html")
link(rel="import" href="../bower_components/paper-icon-button/paper-icon-button.html")
link(rel="import" href="../bower_components/iron-flex-layout/iron-flex-layout-classes.html")
link(rel="import" href="../bower_components/iron-list/iron-list.html")
link(rel="import" href="../bower_components/marked-element/marked-element.html")
link(rel="import" href="../fire-chat-post/fire-chat-post.html")
link(rel="import" href="../user-icon/user-icon.html")
script(src="../bower_components/moment/min/moment.min.js")

dom-module#fire-chat
  template
    style(is="custom-style" include="iron-flex iron-flex-factors iron-positioning iron-flex-alignment")
      :stylus
        .posts
          overflow: scroll
          fire-chat-post
            &:not(:last-child)
              border-bottom: 1px solid #eee
        .participants
          padding: 5px 8px
          height: 25px
          user-icon
            width: 25px
            height: 25px
            border-radius: 100%
            overflow: hidden
    firebase-app(auth-domain="[[authDomain]]" database-url="[[database]]" api-key="[[apiKey]]")
    firebase-auth#auth(user="{{authUser}}")
    firebase-query#firstPost(path="/[[roomsPath]]/[[roomId]]/posts" data="{{postsFromFirst}}" limit-to-first="1")
    firebase-query#fbUsers(path="/users" data="{{users}}")
    firebase-query#fbPosts(path="/[[roomsPath]]/[[roomId]]/posts" data="{{posts}}" limit-to-last="[[postsLimit]]")
    firebase-query#fbParticipations(path="/[[roomsPath]]/[[roomId]]/participants" data="{{participants}}")
    template(is="dom-if" if="[[authUser]]")
      iron-list.posts(style$="height: [[postsHeight]]" on-scroll="updatePostsLimit" items="[[posts]]")
        template
          fire-chat-post(post="[[item]]" poster="[[userById(item.createdBy)]]")
      .participants.layout.horizontal
        template(is="dom-repeat" items="[[participantsToUsers(participants, users, participants.length)]]")
          user-icon(user="[[item]]")
      .layout.horizontal
        .flex
          paper-textarea(value="{{postBody}}" label="" on-keydown="onKeydown" on-focus="participate" on-blur="unparticipate" no-label-float="true")
        .button
          paper-icon-button(raised icon="send" on-click="submit" disabled="[[!postBody]]")
  script
    :babel
      // NOTE: class構文はBabelのコンパイルが不完全やからなし
      Polymer({
        is: 'fire-chat',
        properties: {
          authDomain: {
            type: String
          },
          database: {
            type: String
          },
          apiKey: {
            type: String
          },
          roomsPath: {
            type: String,
            value: 'rooms'
          },
          roomId: {
            type: String
          },
          user: {
            type: Object
          },
          postBody: {
            type: String,
            value: ''
          },
          postsPer: {
            type: Number,
            readOnly: true,
            value: 30,
          },
          postsLimit: {
            type: Number,
          },
          postsHeight: {
            type: String,
            value: '500px'
          },
        },
        observers: [
          "updateOrCreateUser(authUser, user)",
          "setFirstPost(postsFromFirst, postsFromFirst.length)",
          "scrollToLast(posts.length)"
        ],
        updateOrCreateUser(authUser, user) {
          if (!(authUser && user)) return
          const { $: { fbUsers } } = this
          fbUsers.ref.child(user.id).set(user)
        },
        setFirstPost([firstPost]) {
          if (!firstPost) return
          this.set('firstPost', firstPost)
        },
        attached() {
          this.prepareScroll()
          this.setPostsLimit(this.postsPer)
          this.signIn()
          this.updateOrCreateUser()
        },
        prepareScroll() {
          this.$.fbPosts.ref.once('value', () => {
            this.async(this.scrollNicely.bind(this), 100)
          })
        },
        scrollNicely() {
          this.$$('.posts').scrollToIndex(this.postsPer - 1)
        },
        setPostsLimit(num) {
          this.set('postsLimit', num)
        },
        signIn() {
          const { $: { auth } } = this
          if (auth.signedIn) return
          auth.signInAnonymously()
        },
        submit() {
          const { postBody } = this
          if (!postBody) return
          const query = this.$$('#fbPosts')
          query.ref.push({ body: this.postBody, createdBy: this.user.id, createdAt: firebase.database.ServerValue.TIMESTAMP })
          this.set('postBody', '')
        },
        onKeydown(event) {
          const { shiftKey, keyCode } = event
          if (!shiftKey && keyCode == 13) {
            event.preventDefault()
            this.submit()
          }
        },
        userById(id) {
          return this.users.find(it => it.id === id)
        },
        participate() {
          const { participants, user: { id } } = this
          const query = this.$$('#fbParticipations')
          const hasParticipated = participants.some(p => {
            return p.userId === id
          })
          if (hasParticipated) return
          query.ref.push({ userId: id })
        },
        unparticipate() {
          const { participants, user: { id } } = this
          const query = this.$$('#fbParticipations')
          participants.filter(p => {
            return p.userId === id
          }).forEach(p => {
            query.ref.child(p.$key).remove()
          })
        },
        participantsToUsers(participants, users) {
          if (!(participants && users)) return []
          return participants.map(p => this.userById(p.userId))
        },
        updatePostsLimit({ target }) {
          if (target.scrollTop > 0) return
          const { posts, firstPost } = this
          if (!(firstPost && posts[0])) return
          if (posts[0].$key === firstPost.$key) return
          this.debounce('updatePostsLimit', ()=> {
            this.setPostsLimit(this.postsLimit + this.postsPer)
            this.prepareScroll()
          }, 500)
        },
        scrollToLast() {
          this.debounce('scrollToLast', () => {
            const postsElm = this.$$('.posts')
            if (!postsElm) return
            if (postsElm.offsetHeight + postsElm.scrollTop + 100 > postsElm.scrollHeight) {
              postsElm.scrollTop = 100000
            }
          }, 100)
        }
      })
